
usart_dirver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000182  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000082f  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f3  00000000  00000000  00000b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e2  00000000  00000000  000011f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000015d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000389  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013d  00000000  00000000  000019e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
/*#include "lcd_driver.h"*/


int main(void)
{
	UART_init(9600);
  82:	60 e8       	ldi	r22, 0x80	; 128
  84:	75 e2       	ldi	r23, 0x25	; 37
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	82 e5       	ldi	r24, 0x52	; 82
  92:	97 e0       	ldi	r25, 0x07	; 7
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x12>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x1c>
  9e:	00 00       	nop
	/*LCD_init();*/
	_delay_ms(300);
	UART_sendString("Hello form Atmega to Pic");
  a0:	80 e6       	ldi	r24, 0x60	; 96
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 85 00 	call	0x10a	; 0x10a <UART_sendString>
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	82 e5       	ldi	r24, 0x52	; 82
  ac:	97 e0       	ldi	r25, 0x07	; 7
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x2c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x36>
  b8:	00 00       	nop
  ba:	ff cf       	rjmp	.-2      	; 0xba <main+0x38>

000000bc <UART_init>:
}

char UART_receive(void){
	while(READ_BIT(UCSRA,RXC) == 0);
	return UDR;
}
  bc:	dc 01       	movw	r26, r24
  be:	cb 01       	movw	r24, r22
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	aa 1f       	adc	r26, r26
  c6:	bb 1f       	adc	r27, r27
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	aa 1f       	adc	r26, r26
  ce:	bb 1f       	adc	r27, r27
  d0:	9c 01       	movw	r18, r24
  d2:	ad 01       	movw	r20, r26
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	44 1f       	adc	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	44 1f       	adc	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	72 e1       	ldi	r23, 0x12	; 18
  e8:	8a e7       	ldi	r24, 0x7A	; 122
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 9d 00 	call	0x13a	; 0x13a <__udivmodsi4>
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	31 09       	sbc	r19, r1
  f4:	30 bd       	out	0x20, r19	; 32
  f6:	29 b9       	out	0x09, r18	; 9
  f8:	53 9a       	sbi	0x0a, 3	; 10
  fa:	54 9a       	sbi	0x0a, 4	; 10
  fc:	86 e8       	ldi	r24, 0x86	; 134
  fe:	80 bd       	out	0x20, r24	; 32
 100:	08 95       	ret

00000102 <UART_send_data>:
 102:	5d 9b       	sbis	0x0b, 5	; 11
 104:	fe cf       	rjmp	.-4      	; 0x102 <UART_send_data>
 106:	8c b9       	out	0x0c, r24	; 12
 108:	08 95       	ret

0000010a <UART_sendString>:

void UART_sendString(char *ptr){
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ec 01       	movw	r28, r24
	while(*ptr!=0){
 110:	88 81       	ld	r24, Y
 112:	88 23       	and	r24, r24
 114:	79 f0       	breq	.+30     	; 0x134 <UART_sendString+0x2a>
 116:	21 96       	adiw	r28, 0x01	; 1
		UART_send_data(*ptr);
 118:	0e 94 81 00 	call	0x102	; 0x102 <UART_send_data>
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	80 e7       	ldi	r24, 0x70	; 112
 120:	92 e0       	ldi	r25, 0x02	; 2
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <UART_sendString+0x18>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <UART_sendString+0x22>
 12c:	00 00       	nop
	while(READ_BIT(UCSRA,RXC) == 0);
	return UDR;
}

void UART_sendString(char *ptr){
	while(*ptr!=0){
 12e:	89 91       	ld	r24, Y+
 130:	81 11       	cpse	r24, r1
 132:	f2 cf       	rjmp	.-28     	; 0x118 <UART_sendString+0xe>
		UART_send_data(*ptr);
		ptr++;
		_delay_ms(100);
	}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <__udivmodsi4>:
 13a:	a1 e2       	ldi	r26, 0x21	; 33
 13c:	1a 2e       	mov	r1, r26
 13e:	aa 1b       	sub	r26, r26
 140:	bb 1b       	sub	r27, r27
 142:	fd 01       	movw	r30, r26
 144:	0d c0       	rjmp	.+26     	; 0x160 <__udivmodsi4_ep>

00000146 <__udivmodsi4_loop>:
 146:	aa 1f       	adc	r26, r26
 148:	bb 1f       	adc	r27, r27
 14a:	ee 1f       	adc	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	a2 17       	cp	r26, r18
 150:	b3 07       	cpc	r27, r19
 152:	e4 07       	cpc	r30, r20
 154:	f5 07       	cpc	r31, r21
 156:	20 f0       	brcs	.+8      	; 0x160 <__udivmodsi4_ep>
 158:	a2 1b       	sub	r26, r18
 15a:	b3 0b       	sbc	r27, r19
 15c:	e4 0b       	sbc	r30, r20
 15e:	f5 0b       	sbc	r31, r21

00000160 <__udivmodsi4_ep>:
 160:	66 1f       	adc	r22, r22
 162:	77 1f       	adc	r23, r23
 164:	88 1f       	adc	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	1a 94       	dec	r1
 16a:	69 f7       	brne	.-38     	; 0x146 <__udivmodsi4_loop>
 16c:	60 95       	com	r22
 16e:	70 95       	com	r23
 170:	80 95       	com	r24
 172:	90 95       	com	r25
 174:	9b 01       	movw	r18, r22
 176:	ac 01       	movw	r20, r24
 178:	bd 01       	movw	r22, r26
 17a:	cf 01       	movw	r24, r30
 17c:	08 95       	ret

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
